=======================================
DOCTEST TEXT FILE -> INCLUDES ALL TESTS
=======================================

# LINE COMMAND TO START TESTING -> python3 -m doctest -v ./tests/2-matrix_divided.txt
# Option -v is to add more details after testing
# Option -m is for the module-name (it expects the name of a module after)

=== First import method to test ===

>>> matrix = __import__('2-matrix_divided').matrix_divided

SUCCESS CASES:
==============

TESTING NORMAL DIV:
-------------------

>>> newMatrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix(newMatrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

TESTING FLOAT DIV:
------------------

>>> matrix(newMatrix, 3.3)
[[0.3, 0.61, 0.91], [1.21, 1.52, 1.82]]

TESTING NEGATIVE NUMBERS:
-------------------------

>>> newMatrix = [[1, -2, 3], [-4, 5, -6]]

>>> matrix(newMatrix, -3)
[[-0.33, 0.67, -1.0], [1.33, -1.67, 2.0]]


TESTING FLOAT NUMBERS IN MATRIX:
--------------------------------

>>> newMatrix = [[1.2, 2.3, 3.4], [4.5, 5.6, 6.7]]

>>> matrix(newMatrix, 3)
[[0.4, 0.77, 1.13], [1.5, 1.87, 2.23]]


TESTING LARGE NUMBERS:
----------------------

>>> newMatrix = [[12345, 2, 3], [4, 5, 6]]

>>> matrix(newMatrix, 3)
[[4115.0, 0.67, 1.0], [1.33, 1.67, 2.0]]

FAIL CASES:
===========

TESTING EMPTY MATRIX:
---------------------

>>> newMatrix = [[], []]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> newMatrix = []

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix(None, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

TESTING LENGHT MATRIX LISTS:
----------------------------

>>> newMatrix = [[1, 2, 3], [4]]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> newMatrix = [[1, 2, 3], [4, 5, 6], [7, 8]]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

TESTING PASSING TYPE CHAR/STR:
------------------------------

>>> newMatrix = [[1, 2, '3'], [4, 5, 6]]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> newMatrix = [["Hello", "Motha", "Foca"], [4, 5, "Tired"]]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

TESTING PASSING DICT, TUP, SET:
-------------------------------

>>> newMatrix = [[1, 2, 3], (4, 5, 6)]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> newMatrix = [[1, 2, 3], {4, 5, 6}]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> newMatrix = [{"No." : 1}]

>>> matrix(newMatrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

TESTING PASSING EXTRA ARGUMENTS:
--------------------------------

>>> newMatrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix(newMatrix, 3, 4)
Traceback (most recent call last):
...
TypeError: matrix_divided() takes 2 positional arguments but 3 were given

TESTING PASSING LESS ARGUMENTS:
-------------------------------

>>> newMatrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix(newMatrix)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

TESTING IF DIV IS 0:
--------------------

>>> newMatrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix(newMatrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

TESTING IF USR PASS NON DIGIT ARG IN DIV POS:
---------------------------------------------

>>> newMatrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix(newMatrix, 'a')
Traceback (most recent call last):
...
TypeError: div must be a number
